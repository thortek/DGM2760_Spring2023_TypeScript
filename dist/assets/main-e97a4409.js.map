{"version":3,"file":"main-e97a4409.js","sources":["../../src/basicTypes.ts","../../src/index.ts"],"sourcesContent":["export const functionParamsExample = () => {\n    return {\n        title: `Data types can be set on function parameters`,\n        explanation: `This is the syntax when indicating the data type of a function parameter.  After the parameter name, add a colon (:), a space, and then the data type you expect.  Be sure to use the primitive data types! (e.g. 'number' instead of 'Number')`,\n        code: `<pre data-prefix=\"1\"><code>function add(num1: number, num2: number) {</code></pre>\n            <pre data-prefix=\"2\"><code>    return num1 + num2</code></pre>\n        <pre data-prefix=\"3\"><code>}</code></pre>`\n    }\n}\n\nexport const objectTypeExample = () => {\n    return {\n        title: `Object data type with all properties set`,\n        explanation: `TypeScript can infer the data type of an object if all properties are set, but this example shows how to explicitly set the types of each property.`,\n        code: `<pre data-prefix=\"1\"><code>enum Role {ADMIN, DEV, STUDENT}</code></pre>\n        <pre data-prefix=\"2\"><code></code></pre>\n        <pre data-prefix=\"3\"><code>const sportsCar: {</code></pre>\n        <pre data-prefix=\"4\"><code>  make: string</code></pre>\n        <pre data-prefix=\"5\"><code>  model: string</code></pre>\n        <pre data-prefix=\"6\"><code>  horsepower: number</code></pre>\n        <pre data-prefix=\"7\"><code>  style: string</code></pre>\n        <pre data-prefix=\"8\"><code>  isFast: boolean</code></pre>\n        <pre data-prefix=\"9\"><code>  colors: string[]</code></pre>\n        <pre data-prefix=\"10\"><code>  driver: [number, string]</code></pre>\n        <pre data-prefix=\"11\"><code>  role: Role</code></pre>\n        <pre data-prefix=\"12\"><code>} = {</code></pre>\n        <pre data-prefix=\"13\"><code>  make: 'McLaren',</code></pre>\n        <pre data-prefix=\"14\"><code>  model: '720s',</code></pre>\n        <pre data-prefix=\"15\"><code>  horsepower: 720,</code></pre>\n        <pre data-prefix=\"16\"><code>  style: 'coupe',</code></pre>\n        <pre data-prefix=\"17\"><code>  isFast: true,</code></pre>\n        <pre data-prefix=\"18\"><code>  colors: ['red', 'blue', 'silver'],</code></pre>\n        <pre data-prefix=\"19\"><code>  driver: [1, 'McLaren'],</code></pre>\n        <pre data-prefix=\"20\"><code>  role: Role.ADMIN,</code></pre>\n        <pre data-prefix=\"21\"><code>}</code></pre>`\n    }\n}\n\nconsole.log(JSON.stringify(functionParamsExample()), JSON.stringify(objectTypeExample()))\n\n// A parameter is a named variable passed into a function\nfunction add(num1: number, num2: number): number {\n    return num1 + num2\n}\n\nconst numberOne = 25\nconst numberTwo = 3.5\n\n// an argument is a value (primitve or object) passed as input to a function.\nlet result = add(numberOne, numberTwo)\nconsole.log(result)\n\nenum Role {ADMIN, DEV, STUDENT}\n\nconst sportsCar: {\n    make: string;\n    model: string;\n    horsepower: number;\n    style: string;\n    isFast: boolean;\n    colors: string[];\n    driver: [number, string];\n    role: Role;\n} = {\n    make: \"McLaren\",\n    model: '720s',\n    horsepower: 720,\n    style: 'coupe',\n    isFast: true,\n    colors: ['red', 'blue', 'silver'],\n    driver: [1, 'McLaren'],\n    role: Role.ADMIN,\n}\n\nconsole.log('My car is one of these', sportsCar)\n\n// Example of typescript union types    \n\nfunction combine(input1: number | string, input2: number | string) {\n    let result\n    if (typeof input1 === 'number' && typeof input2 === 'number') {\n        result = input1 + input2\n    } else {\n        result = input1.toString() + input2.toString()\n    }\n    return result\n}\n\nconsole.log(combine(25, 3.5))\nconsole.log(combine('25', '3.5'))\n\n// Example of typescript literal types\n\nfunction combine2(input1: number | string, input2: number | string, resultConversion: 'as-number' | 'as-text') {\n    let result\n    if (typeof input1 === 'number' && typeof input2 === 'number' || resultConversion === 'as-number') {\n        result = +input1 + +input2\n    } else {\n        result = input1.toString() + input2.toString()\n    }\n    return result\n}\n\nconsole.log(combine2(25, 3.5, 'as-number'))\nconsole.log(combine2('25', '3.5', 'as-number'))\nconsole.log(combine2('25', '3.5', 'as-text'))\n\n// Example of typescript function as type\n//function loadExample(functionExample: () => { title: string, explanation: string, code: string })","import { functionParamsExample, objectTypeExample } from \"./basicTypes\"\n\nconst funcParamsButton = document.querySelector('#funcParams')!\nconst objectTypesButton = document.querySelector('#objectTypes')!\n\n//const codeExample = document.querySelector('#code-example')!\nconst cardTitle = document.querySelector('.card-title')!\nconst cardContent = document.querySelector('#card-content')!\nconst codeContent = document.querySelector('#code-content')!\n\nfuncParamsButton.addEventListener('click', loadExample.bind(this, functionParamsExample))\nobjectTypesButton.addEventListener('click', loadExample.bind(this, objectTypeExample))\n\n// function showFuncParamsExample() {\n//     const { title, explanation, code } = functionParamsExample()\n//     cardTitle.textContent = title\n//     cardContent.textContent = explanation\n//     codeContent.innerHTML = code\n// }\n\n// function showObjTypesExample() {\n//     const { title, explanation, code } = objectTypeExample()\n//     cardTitle.textContent = title\n//     cardContent.textContent = explanation\n//     codeContent.innerHTML = code\n// }\n\nfunction loadExample(functionExample: () => { title: string, explanation: string, code: string }) {\n    const { title, explanation, code } = functionExample()\n    cardTitle.textContent = title\n    cardContent.textContent = explanation\n    codeContent.innerHTML = code\n}"],"names":["functionParamsExample","objectTypeExample","add","num1","num2","numberOne","numberTwo","result","sportsCar","combine","input1","input2","combine2","resultConversion","funcParamsButton","objectTypesButton","cardTitle","cardContent","codeContent","loadExample","this","functionExample","title","explanation","code"],"mappings":"4BAAO,MAAMA,EAAwB,KAC1B,CACH,MAAO,+CACP,YAAa,kPACb,KAAM;AAAA;AAAA,kDAAA,GAMDC,EAAoB,KACtB,CACH,MAAO,2CACP,YAAa,sJACb,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAA,GAwBd,QAAQ,IAAI,KAAK,UAAUD,EAAsB,CAAC,EAAG,KAAK,UAAUC,EAAmB,CAAA,CAAC,EAGxF,SAASC,EAAIC,EAAcC,EAAsB,CAC7C,OAAOD,EAAOC,CAClB,CAEA,MAAMC,EAAY,GACZC,EAAY,IAGlB,IAAIC,EAASL,EAAIG,EAAWC,CAAS,EACrC,QAAQ,IAAIC,CAAM,EAIlB,MAAMC,EASF,CACA,KAAM,UACN,MAAO,OACP,WAAY,IACZ,MAAO,QACP,OAAQ,GACR,OAAQ,CAAC,MAAO,OAAQ,QAAQ,EAChC,OAAQ,CAAC,EAAG,SAAS,EACrB,KAAM,CACV,EAEA,QAAQ,IAAI,yBAA0BA,CAAS,EAI/C,SAASC,EAAQC,EAAyBC,EAAyB,CAC3DJ,IAAAA,EACJ,OAAI,OAAOG,GAAW,UAAY,OAAOC,GAAW,SAChDJ,EAASG,EAASC,EAElBJ,EAASG,EAAO,SAAS,EAAIC,EAAO,SAAS,EAE1CJ,CACX,CAEA,QAAQ,IAAIE,EAAQ,GAAI,GAAG,CAAC,EAC5B,QAAQ,IAAIA,EAAQ,KAAM,KAAK,CAAC,EAIhC,SAASG,EAASF,EAAyBC,EAAyBE,EAA2C,CACvGN,IAAAA,EACJ,OAAI,OAAOG,GAAW,UAAY,OAAOC,GAAW,UAAYE,IAAqB,YACjFN,EAAS,CAACG,GAAS,CAACC,EAEpBJ,EAASG,EAAO,SAAS,EAAIC,EAAO,SAAS,EAE1CJ,CACX,CAEA,QAAQ,IAAIK,EAAS,GAAI,IAAK,WAAW,CAAC,EAC1C,QAAQ,IAAIA,EAAS,KAAM,MAAO,WAAW,CAAC,EAC9C,QAAQ,IAAIA,EAAS,KAAM,MAAO,SAAS,CAAC,ECvG5C,MAAME,EAAmB,SAAS,cAAc,aAAa,EACvDC,EAAoB,SAAS,cAAc,cAAc,EAGzDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAc,SAAS,cAAc,eAAe,EACpDC,EAAc,SAAS,cAAc,eAAe,EAE1DJ,EAAiB,iBAAiB,QAASK,EAAY,KAAKC,WAAMpB,CAAqB,CAAC,EACxFe,EAAkB,iBAAiB,QAASI,EAAY,KAAKC,WAAMnB,CAAiB,CAAC,EAgBrF,SAASkB,EAAYE,EAA6E,CAC9F,KAAM,CAAE,MAAAC,EAAO,YAAAC,EAAa,KAAAC,GAASH,EAAgB,EACrDL,EAAU,YAAcM,EACxBL,EAAY,YAAcM,EAC1BL,EAAY,UAAYM,CAC5B"}